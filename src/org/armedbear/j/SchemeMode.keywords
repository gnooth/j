#f
#t
*
+
-
/
<
=
>
abs
and
append
apply
assoc
assq
assv
begin
boolean?
cadr
car
case
cdr
char->integer
char?
complex?
cond
cons
define
define-syntax
delay
display
do
else
eq?
equal?
eqv?
even?
exact->inexact
for-each
if
inexact->exact
integer->char
integer?
lambda
length
let
let*
letrec
list
list->vector
list-ref
list-tail
list?
make-string
make-vector
map
member
memq
memv
modulo
negative?
newline
not
null?
number?
odd?
or
pair?
peek-char
positive?
procedure?
quote
quotient
rational?
read
read-char
real?
remainder
reverse
set!
set-car!
set-cdr!
string->symbol
string-ci=?
string-length
string-ref
string-set!
string=?
string?
symbol->string
symbol?
vector
vector->list
vector-fill!
vector-length
vector-ref
vector-set!
vector?
write
write-char
zero?
